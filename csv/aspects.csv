nodeID|objective|rationale|scope|slicing|pulse|variants|examples|tenets|standards|hints
FunctionalRequirements|Identify functional constraints on the solution: Policies to be enforced and processes to carry out, independent of any technical considerations.|Requirements complexity can best be managed if functional (= “business”) requirements are handled separately and agreed upon amongst stakeholders.|Any|Any|Moderate|Wording Templates;User Stories;Requirements Models;Process Maps |Vote-Requirements.pdf|Unambiguous: Interpretable in exactly one way;Testable: Compliance or noncompliance can be demonstrated|[IREB Certified Professional for Requirements Engineering](https://www.ireb.org/en/cpre/basics/)|A requirement is functional, if it would still need to be stated in spite of having perfect technology.
NonfunctionalRequirements|Identify technology and quality constraints on the solution that determine how well the solution shall fulfill the functional requirements.|It is the way in which a solution does whatever it does that determines its success or failure.|Medium,Large|Deep|Moderate|Definition of Done;Requirements Models;Quality Standards|perspectives.pdf|All technology constraints are clearly specified;Relevant quality constraints have been identified and clearly specified with expected levels of performance|[ISO/IEC 25010](https://iso25000.com/index.php/en/iso-25000-standards/iso-25010)|Technology Constraints are often defined by the operational environment;A checklist can help to ensure that all relevant qualities of service have been specified
UseCaseModel|Show the scope and context of the solution domain. The scope is modeled as Use Cases, the context as Actors.|The right solution can only be built if the system context  and the ways of using a system are determined. |Any|Deep|Low|Modeling-Tool based;Drawing-Tool based|Vote-UseCaseOverview.pdf|For a solution, all users and external systems are modeled as Actors.;For every Actor, a specific way of using the solution is modeled as a Use Case.|[Unified Modeling Language](https://www.omg.org/spec/UML/About-UML/): Use-Case Model|Complex domains should be divided into subdomains, with their own Use-Case (sub-)Models.
UseCaseNarrative|Describe the functionality and behavior of the solution: Each Use Case is described in a Use-Narrative, usually separated in a basic flow and several alternative flows. |The solution cannot be implemented or tested, if the standard behavior and its variations are not understood.|Medium,Large|Broad|High|Text-based;Model-based, e.g. using UML activity diagrams| |For small teams or simple Use Cases, the Narrative can have the form of a conversation.;For large teams or complex Use Cases, the Narrative needs to be written down and formally agreed upon.|[Ivar Jacobson International: Use-Case 2.0](https://www.ivarjacobson.com/publications/white-papers/use-case-ebook)|Each flow of a Use-Case Narrative is a natural choice for a Use-Case-Slice: A smaller part of functionality that can be implemented and tested in a short time frame.
DataModel|Define major elements of the domain and identify important relationships that exist between those elements.|A thorough understanding of the domain(s) is key to building a useful solution.|Any|Deep|Low|Logical Data Model;Domain Model|Vote-DomainModel.pdf|Model and describe all relevant policies and constraints;Use domain terminology;Strive for simplicity. Don’t try to be overly detailed.|[Unified Modeling Language](https://www.omg.org/spec/UML/About-UML/):Class Model;[ISO/IEC/IEEE 31320-2:2012 (IDEF1X97)](https://www.iso.org/standard/60614.html)|Complex domains should be divided into subdomains, with their own Data (sub-)Models.;A solid logical data model is a good foundation for all implementation related disciplines.
PersonasUsageScenarios|Make users relatable with personas and show real-live workflows with usage scenarios. Clearly show the unique traits and needs of different user groups.|The development team needs to design for real users and their actual needs and abilities instead of for themselves or some vaguely defined imaginary user.|Medium,Large|Deep|Low|User/Customer Journey;Persona fact sheet| |Include a picture and name with the personas to make them relatable.;Don’t leave out emotion: values and needs in personas, emotional reactions in scenario.|[Alan Cooper: The Inmates Are Running the Asylum](https://www.pearson.com/us/higher-education/program/Cooper-Inmates-Are-Running-the-Asylum-The-Why-High-Tech-Products-Drive-Us-Crazy-and-How-to-Restore-the-Sanity-2nd-Edition/PGM275766.html)|It can be helpful to name non-Personas (who is not a target audience?);Usage scenarios are useful for highlighting features with a high value for users (e.g. negative emotions)
UserInterfaceWorkflows|Show the user interface in context of a specific use case (layout and static content, dynamic behavior as well as navigation)|Ensure that the user interface works smoothly within the user’s real-life workflow and that the experience for the user is enjoyable and intuitive.|Any|Broad|Low|UI Prototype;Flow Chart;Storyboard or Comic Strip featuring illustrations of user + screens|Vote-Mockups.pdf|Don’t model every possible workflow. Concentrate on the most-used and critical use cases.;Use realistic data as much as possible.| |It may be necessary to document what happens before and after the workflow that is modeled.
UIStructure|Define the general structure of the user interface: how use cases are distributed to sections of an application, how to navigate from one screen to another.|Ensure that things that belong together are placed together and that users find their way within the user interface.|Medium,Large|Deep|Low|Sitemap diagram;UI prototype showing navigation|Vote-InformationArchitecture.pdf|Define the navigation structure explicitly, instead of just adding screens somewhere they might fit at the time.;Leave room for likely future additions to the structure.|Navigation Patterns:;Hierarchical Tree;Hub and Spoke;Filtered View;Nested Doll|If possible, use a structure that is familiar for the operating system or platform (Hierarchical Tree for big screens, Hub and Spoke for mobile applications)
VisualDesign|Define the Application’s visual style using color, typography and form language.|Ensures consistency across different parts of the application or multiple design teams. |Large|Any|Moderate|Prototype as documentation;Style Guide (static document or wiki page);Design System (web page with description and multiple resources)| |Align the application’s Look and Feel with the customer’s Corporate Identity, if available.;Reduce the amount of different visual styles (e.g. colors) to keep the look and feel clear and consistent.|[Atomic Design](https://atomicdesign.bradfrost.com/) |“Design Systems” provide a central place for all project members to find resources about UI design, from Prototyping Assets to Code Snippets.
DescriptionofUIBehavior|Describe the dynamic behavior of the application’s user interface: UI interactions, screen transistions and animations.|Static mockups are useful, but often not specific enough to implement all details. Behavioral description in one form or another is often needed to fill in the blanks.|Any|Deep|High|Textual description;Tabular description of states (especially for complex interactive forms);Interactive Prototypes (using UI Prototyping Tools)|Vote-Screenflow.pdf|Make UI documentation useful for all project members.;Take special care about designer-developer-handoff.| |Make documentation easily accessible for developers, e.g. part of the prototype or in one central website as “single source of truth”
InformationView|Describe the way the solution stores, manipulates, manages, and distributes information|The ultimate purpose of any IT solution is to manipulate information in some form, and this view shows a complete but high-level picture of static data structure and information flow.|Any|Deep|Moderate|Logical Data Model;Physical Data Model|Vote-Data-Model.pdf;VoteApp-GraphQL-Communication.pdf|Only model entities that are needed by the solution’s functionality;Right level of detail|[Unified Modeling Language](https://www.omg.org/spec/UML/About-UML/);[ISO/IEC/IEEE 31320-2:2012 (IDEF1X97)](https://www.iso.org/standard/60614.html)|If available, the aspect [Data Model](node:DataModel) of artifact Domain Models should be used as the solution’s Logical Data Model.
UIPatternsUIFramework|Define reusable UI patterns and corresponding code components.|Reusable assets (prototyping parts or code snippets) speed up development of new designs.|Medium,Large|Broad|Moderate|Textual documentation (e.g. wiki pages);Design systems with code snippets;Ready-to-use UI component library for developers| |Patterns can have different sizes, from a UI component to whole page templates.;Never introduce new UI patterns without a good reason.|[Material Design](https://material.io/design/introduction);[Atlassian Design Language](https://atlassian.design/);[Apple Human Interface Guidelines](https://developer.apple.com/design/human-interface-guidelines/)|Build the application patterns on top of an established baseline. In most cases that baseline will be the UI framework used for coding the application.;It can be useful to describe when not to use a pattern.
ConcurrencyView|Describes the concurrency structure of the solution and maps functional elements to concurrency units. |To arrive at a performant solution for a complex problem,  clearly identify the parts of the system that can execute concurrently and how this is coordinated and controlled. |Medium,Large|Any|Moderate|Activity Diagram;State Machine Diagram|concurrency-view.pdf|Strive for simplicity;Rule out Race Conditions;Rule out Deadlocks|[Unified Modeling Language](https://www.omg.org/spec/UML/About-UML/);Petri Nets;Actor Model|It is difficult to design, implement and debug concurrent systems.;Introduce concurrency into a solution only when necessary.
Perspectives|A collection of activities, tactics, and guidelines that are used to ensure that a solution exhibits a particular set of related quality properties that require consideration across a number of different views.|The quality properties of the solution need to fulfill the solution’s Nonfunctional Requirements.|Medium,Large|Broad|Moderate|Documents;Models|perspectives.pdf|Architectural tradeoffs are necessary for every solution;Quality properties usually cannot be expresses in a single view|[ATAM – Architecture Tradeoff Analysis Method](https://resources.sei.cmu.edu/library/asset-view.cfm?assetid=5177)|You should focus on the realization of the solution’s most important [Nonfunctional Requirements](node:NonfunctionalRequirements), e.g.: Performance and Scalability, Security, Usability
ContextView|Shows relationships, dependencies, and interactions between the system and its run-time environment (people, systems, external entities).|Architects tend to assume that the “outward-facing” information is clearly and unambiguously defined elsewhere. However, this is often not the case and should be provided by this view.|Medium,Large|Deep|Low| |context-view.pdf|Clearly define system scope;Identify external entities, services and data used;Determine impact of the solution on its environment|Unified Modeling Language|This view is related to and has to be consistent with the [Use Case Model](node:UseCaseModel).
DeploymentView|Required technical environment and mapping of software elements to runtime environment that will execute them.|Most solutions have complex runtime dependencies and/or complex runtime environments which need to be made explicit.|Medium,Large|Deep|Moderate|Deployment Scripts;Infrastructure as Code|deployment-view.pdf|Clear and accurate dependencies;Proven technology;Early consideration of the deployment environment;Automate deployment| | 
OperationsView|Describes how the solution will be operated, administered, and supported when it is running in its production environment|Even for a cloud-based solution, operational monitoring and control has to be defined. For an on-premise-solution, all aspects of system administration have to be considered.|Large|Any|Low|Cloud-based / Serverless;On-Premise| |Identify solutions that address the operational concerns of the solution’s stakeholders| | 
DomainCode|The part of the solution’s code that realizes the functional requirements in adherence to the software architecture.|This code is at the heart of the solution. Without Domain Code that fulfills the requirements, there would be no valuable outcome for the customer.|Any|Broad|High|Object-oriented;Functional;Declarative;Distributed;Monolithic|data-model.pdf;domain-code.pdf|Software Craftsmanship;Frequent Feedback by Users/Customers;Use the Domain’s language in code|Modularization;Encapsulation;Low Coupling|The Domain Code is a realization of the [Use Case Narrative](node:UseCaseNarrative).;If these are unclear: Don’t guess, but clarify!
FunctionalView|Describes the solution’s functional elements, their responsibilities, interfaces, and primary interactions.|The functional structure drives the shape of other system structures such as the information structure and concurrency structure. It also has a significant impact on the system’s quality properties.|Any|Any|Moderate|Package Diagram;Component Diagram;Class Diagram|functional-view.pdf|Clearly defined interfaces;Well understood responsibilities;Right level of detail;Not too many dependencies|[ISO 42010:2011](https://www.iso.org/standard/50508.html);[Unified Modeling Language](https://www.omg.org/spec/UML/About-UML/)|The Functional view is the cornerstone of most Architecture Descriptions.;Too often, it is also the only view of the architecture produced.
TechnicalCode|Every solution needs Technical Code that exposes Domain Code (“Business Logic”) to its environment and makes the environment available to the Domain Code. |Domain Code usually needs to interact with user interfaces, services it depends on, libraries it uses, networks, operating systems, databases etc.|Any|Broad|High|Different technology stacks, depending on architectural style of solution|packagesJSON-Frontend.pdf;packagesJSON-Backend.pdf|Clear separation of Technical Code from Domain Code;Only use technology that is justified by business requirements;Reuse existing components | |Technical Code has to be consistent with the [Software Architecture Description](node:FunctionalView);Technical Code is often referred to as “glue code”, because it is needed for components to work together
SoftwareVersions|Each productive release of the solution has a specific feature set and an individual version identifier. |It is often necessary to (at least temporarily) support different productive versions of the solution. In order to enhance or correct each version’s features, every contributing artifact has to be under version control.|Any|Broad|High|Sequence-based identifiers;Calendar Versioning| |Minimize the number of productive versions of a product| |Supporting different versions of the solution is extra work and needs a careful version control strategy
BinaryArtifacts|A set of deployable artifacts that are generated by a Build Automation Tool for a specific release of the solution.|To be able to be deployed, the software must be (optionally) compiled, packaged with components it depends on and run through automated tests.|Any|Broad|Moderate|On-demand builds;Scheduled automation;Triggered automation| |Eliminate redundant tasks;Specify all dependencies among source artifacts| |A Build Automation Tool provides a history of builds and releases in order to investigate issues
DeploymentScripts|Specify necessary steps, configurations and possibly runtime environments to deploy the solution.|Depending on the environment structure and the operational setup, it is desirable to automate deployment as much as possible.|Medium,Large|Broad|Moderate|Language-specific packages;Virtual Machines;(Orchestrated) Containers;Serverless functions| |Automate deployment to make it painless;Deploy often, so you know it works;Use the same scripts to deploy to different environments|YAML;Docker;Kubernetes;AWS Lambda|Choose the most lightweight deployment alternative suitable for the [Nonfunctional Requirements](node:NonfunctionalRequirements).
InstalledBinaryArtifacts|Reliably offer the solution in a production environment to its users.|The solution can only be used if it is made available in a stable production environment, which also allows monitoring and updating.|Any|Broad|Moderate|Structured monolith;Distributed services;Service mesh| |Choose a managed, virtual production environment| |If possible for your type of solution, consider “serverless” deployment without any need for runtime administration 
SoftwareinProduction|Operate the solution in a reliable and efficient production environment that supports effective monitoring and updates. User feedback and problems need also be managed.|Users want to access the solution’s functionality continuously and need support in case of failure. DevOps or operations personnel need to monitor and update the solution.|Any|Broad|Moderate|Help Desk;FAQs;Operational dashboards;Alerts|Vote-App.url|Service errors are handled gracefully;Monitoring delivers meaningful metrics about the solution’s execution|[ITIL Service Management](https://www.axelos.com/best-practice-solutions/itil/what-is-itil)|Even with an externally managed or even “serverless” production environment, you need local service management.
ReviewFeedback|Provide formal or informal feedback to the authors of a solution artifact about the quality of their work.|Issues with the solution can be identified earlier and more cheaply than they would be identified by testing or by productive use.|Medium,Large|Any|Moderate|Oral feedback during Peer Review;Tool-based feedback, e.g. Code Review;Written Review Report (as result of a formal review meeting)| |Conduct peer reviews early and often;Reviewing is learning|[IEEE 1028 Standard for Software Reviews and Audits](https://ieeexplore.ieee.org/document/4601584)|Limit formal reviews to important artifacts with high impact on downstream decisions/activities
Usability|Document the results of evaluating the solution on users, who have no prior exposure to it.|The design intuitiveness is paramount to the success of the solution as a fully functioning app that creates confusion amongst its users will not be used.|Any|Broad|Moderate|Hallway testing;Expert review;A/B testing| |Usability Testers must watch people use the software in person|[Xtensio: How to Write a Usability Testing Report](https://xtensio.com/how-to-write-a-usability-testing-report/)|Instead of testing with a large number of participants, it is better to conduct several usability tests (at different times) with a small number of people
Functionality|A report of the results from running a test case or a test suite, in order to provide stakeholders with information about how well the solution meets the functional requirements.|Testing can be conducted as soon as executable software (even if partially complete) exists. It can provide objective, independent information about the solution and risk of its failure to users or customers.|Medium,Large|Any|Moderate|Manual testing;Test automation;User acceptance testing|software-test.pdf|Functionality Tests are based on [Use-Case Narratives](node:UseCaseNarrative);Risk-based testing: Important functionality should be tested more thoroughly;Agility needs test automation|[ISO/IEC/IEEE 29119 Software Testing](https://www.researchgate.net/publication/323759544_Overview_of_Software_Testing_Standard_ISOIECIEEE_29119);[Bertrand Meyer: Seven Principles of Software Testing](http://se.ethz.ch/~meyer/publications/testing/principles.pdf)|As the number of possible tests for even simple software components is practically infinite, all software testing uses some strategy to select tests that are feasible for the available time and resources
Quality|A report of the results from running a test case or a test suite, in order to provide stakeholders with information about how well the solution meets the nonfunctional requirements.|It has to be determined if the solution e.g. performs its functions within an acceptable time, and can be installed and run in its intended environment.|Medium,Large|Any|Moderate|System testing;Operational acceptance testing| |Quality Tests are based on [Nonfunctional Requirements](node:NonfunctionalRequirements).|[ISO/IEC 25010](https://iso25000.com/index.php/en/iso-25000-standards/iso-25010)|Quality testing refers to aspects of the solution that may not be related to a specific function or user action, such as scalability, behavior under certain constraints, or security.
UsageTutorial|A method of transferring knowledge on how to use the solution, usually as a step by step walkthrough on how to achieve certain goals.|More interactive and specific than a manual, a tutorial seeks to teach by example and supply the information to complete a certain task.|Medium,Large|Broad|Low|Written Text;Demonstration Video;Screencast;Real-time webinars;Online-Tutoring|Vote-Usage-Tutorial.pdf|Learning by example is one of the most effective learning methods| |Be accurate and complete in the steps described;Be consistent with the particular version of the solution
FunctionalityReference|A complete description of the solution’s usable functionality, usually in the form of an online manual. To be easily accessible, the information should be clearly structured and exhaustively indexed.|The solution can only be used effectively, if every detailed functionality is documented. Tutorials can only cover basic, introductory material. Professional usage relies on reference documentation.|Medium,Large|Deep|Low|User Manual;Website;Help-Systems| |Only documented functionality will be used;Documentation has to be up-to-date with implementation;Use a consistent documentation format | |Use a gentle introduction with a high-level overview;Provide orientation throughout the documentation;If possible, visualize concepts
Lessons|Provide knowledge about the solution and general principles of the domain, often occurring in a classroom, with a teacher presenting the material|This can be a highly effective method of solution training, especially for complex topics. Instructors can answer specific user questions or direct them to further resources|Large|Deep|Low|Lecture-style training;Group discussion;eLearning| |Use the appropriate lesson format for your topic;Instructor experience shows!| |Many users want to learn from an experienced teacher or want group discussions;Use shorter eLearning-formats for concise topics
Exercises|Users of the solution try to solve exercises during or between lessons. The results are usually discussed with the attendees, in order to improve their solution skills.|Learning by doing is one of the most efficient training methods. Attendees gain confidence in their own skills of using the solution to solve problems. |Large|Deep|Low|Team exercises during lesson;Homework assignment;Self-study exercises during eLearning| |Choose relevant exercises that are not frustrating;Limit team size to be able to discuss results| |Exercises should focus on handling the solution, not on the solution domain
SoftwareBranches|Branches are independent lines of work that stem from one central code base and are managed by a Version Control System.|Branches allow for parts of the solution to be developed in parallel. Changes to a branch don't affect other developers on the team until they are merged.|Medium,Large|Any|Moderate|Release branching;Feature branching;Task Branching| |Keep the main code line stable;Validate merge outcomes by continuous integration and automated testing | |Try to have short-lived branches, since they are easier to merge.
UILanguageConventions|Make sure that language used in the user interface is easily understood by users.|Language used in development teams and sometimes customer organizations may not match with user language.|Medium,Large|Deep|Low|Glossary| |“Project Lingo” should not spill over to the user interface.| |Use usability tests or focus groups to find out if users understand the language that is used in the UI.
